% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BaseMappingTable.R
\name{MappingTable}
\alias{MappingTable}
\title{R6 Class representing a mapping table.}
\description{
A mapping table defines the structure of a presentation table as a
many-to-many map from columns in a raw dataset, to presentation-ready
categories in an output counts table.

This class is virtual -- it should only be instantiated with a
\code{BaseMappingTable} or \code{MultiMappingTable}.
}
\examples{
try(MappingTable$new()) # Fails -- use a subclass instead

}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{map}}{The data frame used for mapping.}

\item{\code{mtab}}{The table-side data that corresponds to columns of the matrix
representation.}

\item{\code{matrix}}{A matrix representation of the mapping table that indicates
which raw values (in rows) are mapped to table cells (in columns).}

\item{\code{raw_cols}}{The names of columns in \code{map} that are joined with
preprocessed data.}

\item{\code{data_cols}}{The names of columns preprocessed data that are joined
with \code{map}.}

\item{\code{table_cols}}{The names of columns in the output dataset.}

\item{\code{join_clause}}{A \code{\link[dplyr:join_by]{dplyr::join_by()}} object that describes how to join
the data (in \code{x}) to the mapping table (in \code{y}).}

\item{\code{nullspace}}{A matrix with rowspace equal to the kernel of the matrix
representation.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MappingTable-new}{\code{MappingTable$new()}}
\item \href{#method-MappingTable-print}{\code{MappingTable$print()}}
\item \href{#method-MappingTable-count_aggregate}{\code{MappingTable$count_aggregate()}}
\item \href{#method-MappingTable-preprocess}{\code{MappingTable$preprocess()}}
\item \href{#method-MappingTable-clone}{\code{MappingTable$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingTable-new"></a>}}
\if{latex}{\out{\hypertarget{method-MappingTable-new}{}}}
\subsection{Method \code{new()}}{
\code{MappingTable$new()} will fail with an error.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingTable$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Ignored.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingTable-print"></a>}}
\if{latex}{\out{\hypertarget{method-MappingTable-print}{}}}
\subsection{Method \code{print()}}{
Print a mapping table and return it invisibly
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingTable$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Passed to the \code{print} method for \code{tibble}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingTable-count_aggregate"></a>}}
\if{latex}{\out{\hypertarget{method-MappingTable-count_aggregate}{}}}
\subsection{Method \code{count_aggregate()}}{
Count records or sum weights from raw data with a mapping
tbale. \code{count_aggregate()} gives the count of records in each of the
output table groups. It wraps around \code{\link[dplyr:count]{dplyr::tally()}}, which allows
weighted sums instead of counts using the \code{wt} argument.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingTable$count_aggregate(data, wt = NULL, ..., name = "n")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The raw dataset to aggregate.}

\item{\code{wt}}{An optional column in \code{data} to sum records by. Passed to
\code{\link[dplyr:count]{dplyr::tally()}}. When \code{NULL} (the default), counts records. Otherwise,
uses \code{sum(wt)}.}

\item{\code{...}}{Passed to \code{\link[dplyr:mutate-joins]{dplyr::right_join()}}.}

\item{\code{name}}{The name of the count column to create, if it does not
already exist. Passed to \code{\link[dplyr:count]{dplyr::tally()}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingTable-preprocess"></a>}}
\if{latex}{\out{\hypertarget{method-MappingTable-preprocess}{}}}
\subsection{Method \code{preprocess()}}{
Pre-process data for counting and aggregating. The default
behaviour is to return the dataset unchanged, and this may be modified
by creating a subclass.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingTable$preprocess(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The dataset to prepare for counting and aggregating.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingTable-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MappingTable-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingTable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
