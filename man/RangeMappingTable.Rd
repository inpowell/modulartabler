% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mapping_table.R
\name{RangeMappingTable}
\alias{RangeMappingTable}
\title{R6 class representing a mapping table for numeric ranges.}
\description{
R6 class representing a mapping table for numeric ranges.

R6 class representing a mapping table for numeric ranges.
}
\details{
This mapping table class defines the structure for a single dimension of a
count table, mapping a continuous variable to ranges.
}
\examples{

## ------------------------------------------------
## Method `RangeMappingTable$new`
## ------------------------------------------------

# Maps the `age` column into `Age` categories of <20, 20-34, and 35+,
# with separate Unknown and Total categories.
AgeMap <- RangeMappingTable$new(
  table_name = 'Age',
  data_col = 'age',
  "<20" = c(-Inf, 20),
  "20-34" = c(20, 35),
  "35+" = c(35, Inf),
  .other = "Unknown",
  .total = "Total",
  bounds = '[)' # include lower bound, exclude upper bound
)
AgeMap

refdata <- data.frame(age = c(0:120, NA))
AgeMap$count_aggregate(refdata)
}
\section{Super classes}{
\code{\link[modulartabler:MappingTable]{modulartabler::MappingTable}} -> \code{\link[modulartabler:BaseMappingTable]{modulartabler::BaseMappingTable}} -> \code{RangeMappingTable}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RangeMappingTable-new}{\code{RangeMappingTable$new()}}
\item \href{#method-RangeMappingTable-preprocess}{\code{RangeMappingTable$preprocess()}}
\item \href{#method-RangeMappingTable-clone}{\code{RangeMappingTable$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="modulartabler" data-topic="MappingTable" data-id="count_aggregate"><a href='../../modulartabler/html/MappingTable.html#method-MappingTable-count_aggregate'><code>modulartabler::MappingTable$count_aggregate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="modulartabler" data-topic="MappingTable" data-id="print"><a href='../../modulartabler/html/MappingTable.html#method-MappingTable-print'><code>modulartabler::MappingTable$print()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeMappingTable-new"></a>}}
\if{latex}{\out{\hypertarget{method-RangeMappingTable-new}{}}}
\subsection{Method \code{new()}}{
Create a new mapping table object for numeric ranges.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeMappingTable$new(
  table_name,
  data_col,
  ...,
  .other = "Other/Unknown",
  .total = "Total",
  bounds = c("[)", "(]")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{The name of the column to map to. This should generally
be human-readable.}

\item{\code{data_col}}{The name of the numeric column in the dataset to map
from.}

\item{\code{...}}{Range definitions for mapping categories, written as named
arguments. Each argument should be a length-2 numeric vector showing
the minimum and maximum range.}

\item{\code{.other}}{The name of the category to use for missing values and
ranges not included in \code{...}.}

\item{\code{.total}}{The name of the category to use for the total mapping,
which includes all records.}

\item{\code{bounds}}{Define which sides of each range should be included. At
this stage, only semi-open ranges are allowed, with \verb{[)} keeping the
lower limit but excluding the upper limit, and \verb{(]} keeping the upper
limit but excluding the lower limit.

[)\verb{keeping the lower limit but excluding the upper limit, and}(]: R:)\%60\%20keeping\%20the\%0A\%20\%20lower\%20limit\%20but\%20excluding\%20the\%20upper\%20limit,\%20and\%20\%60(}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{MappingTable} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Maps the `age` column into `Age` categories of <20, 20-34, and 35+,
# with separate Unknown and Total categories.
AgeMap <- RangeMappingTable$new(
  table_name = 'Age',
  data_col = 'age',
  "<20" = c(-Inf, 20),
  "20-34" = c(20, 35),
  "35+" = c(35, Inf),
  .other = "Unknown",
  .total = "Total",
  bounds = '[)' # include lower bound, exclude upper bound
)
AgeMap

refdata <- data.frame(age = c(0:120, NA))
AgeMap$count_aggregate(refdata)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeMappingTable-preprocess"></a>}}
\if{latex}{\out{\hypertarget{method-RangeMappingTable-preprocess}{}}}
\subsection{Method \code{preprocess()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeMappingTable$preprocess(data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeMappingTable-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RangeMappingTable-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeMappingTable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
